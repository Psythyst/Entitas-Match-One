//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Psythyst ~ Psythyst.Plugin.PostProcessor.Entitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

public partial class GameContext {

    public GameEntity assetEntity { get { return GetGroup(GameMatcher.Asset).GetSingleEntity(); } }
    public AssetComponent asset { get { return assetEntity.asset; } }
    public bool hasAsset { get { return assetEntity != null; } }

    public GameEntity SetAsset(System.String newName) {
        if (hasAsset) {
            throw new Entitas.EntitasException("Could not set Asset!\n" + this + " already has an entity with AssetComponent!",
                "You should check if the context already has a assetEntity before setting it or use context.Replace${ComponentName}().");
        }
        var entity = CreateEntity();
        entity.AddAsset(newName);
        return entity;
    }

    public void ReplaceAsset(System.String newName) {
        var entity = assetEntity;
        if (entity == null) {
            entity = SetAsset(newName);
        } else {
            entity.ReplaceAsset(newName);
        }
    }

    public void RemoveAsset() {
        assetEntity.Destroy();
    }
}

public partial class GameEntity {

    public AssetComponent asset { get { return (AssetComponent)GetComponent(GameComponentsLookup.Asset); } }
    public bool hasAsset { get { return HasComponent(GameComponentsLookup.Asset); } }

    public void AddAsset(System.String newName) {
        var index = GameComponentsLookup.Asset;
        var component = CreateComponent<AssetComponent>(index);
        component.name = newName;
        AddComponent(index, component);
    }

    public void ReplaceAsset(System.String newName) {
        var index = GameComponentsLookup.Asset;
        var component = CreateComponent<AssetComponent>(index);
        component.name = newName;
        ReplaceComponent(index, component);
    }

    public void RemoveAsset() {
        RemoveComponent(GameComponentsLookup.Asset);
    }
}

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAsset;

    public static Entitas.IMatcher<GameEntity> Asset {
        get {
            if (_matcherAsset == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Asset);
                matcher.componentNames = GameComponentsLookup.ComponentNameCollection;
                _matcherAsset = matcher;
            }

            return _matcherAsset;
        }
    }
}

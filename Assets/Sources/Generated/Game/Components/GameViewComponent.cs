//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Psythyst ~ Psythyst.Plugin.PostProcessor.Entitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

public partial class GameContext {

    public GameEntity viewEntity { get { return GetGroup(GameMatcher.View).GetSingleEntity(); } }
    public ViewComponent view { get { return viewEntity.view; } }
    public bool hasView { get { return viewEntity != null; } }

    public GameEntity SetView(UnityEngine.GameObject newGameObject) {
        if (hasView) {
            throw new Entitas.EntitasException("Could not set View!\n" + this + " already has an entity with ViewComponent!",
                "You should check if the context already has a viewEntity before setting it or use context.Replace${ComponentName}().");
        }
        var entity = CreateEntity();
        entity.AddView(newGameObject);
        return entity;
    }

    public void ReplaceView(UnityEngine.GameObject newGameObject) {
        var entity = viewEntity;
        if (entity == null) {
            entity = SetView(newGameObject);
        } else {
            entity.ReplaceView(newGameObject);
        }
    }

    public void RemoveView() {
        viewEntity.Destroy();
    }
}

public partial class GameEntity {

    public ViewComponent view { get { return (ViewComponent)GetComponent(GameComponentsLookup.View); } }
    public bool hasView { get { return HasComponent(GameComponentsLookup.View); } }

    public void AddView(UnityEngine.GameObject newGameObject) {
        var index = GameComponentsLookup.View;
        var component = CreateComponent<ViewComponent>(index);
        component.gameObject = newGameObject;
        AddComponent(index, component);
    }

    public void ReplaceView(UnityEngine.GameObject newGameObject) {
        var index = GameComponentsLookup.View;
        var component = CreateComponent<ViewComponent>(index);
        component.gameObject = newGameObject;
        ReplaceComponent(index, component);
    }

    public void RemoveView() {
        RemoveComponent(GameComponentsLookup.View);
    }
}

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherView;

    public static Entitas.IMatcher<GameEntity> View {
        get {
            if (_matcherView == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.View);
                matcher.componentNames = GameComponentsLookup.ComponentNameCollection;
                _matcherView = matcher;
            }

            return _matcherView;
        }
    }
}
